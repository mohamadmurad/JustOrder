<?php

namespace App\Models;

use Haruncpi\LaravelUserActivity\Traits\Loggable;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Storage;

class order extends Model
{
    use Loggable;
    use HasFactory;
    public $timestamps = false;
    protected $fillable = [
        'barcode',
        'modelName',
        'modelDesc',
        'siresSizeQty',
        'siresColorQty',
        'siresQty',///
        'siresItemNumber',///
        'quantity',///
        'reservedQuantity',
        'receivedQty',
        'fabricFormula',
        'siresNumber',
        'itemsNumber',
        'orderDate',
        'reservedDate',
        'fabricDate',
        'done',
        'notes',
        'PrintNotes',
        'image',
        'image2',
        'image3',
        'user_id',


        'brand_id',
        'fabric_id',
        'type_id',
        'group_id',
        'subgroup_id',
        'season_id',
        'year_id',
        'supplier_id',
        'fabric_source_id',

    ];

    protected $dates = [
        'orderDate',
        'reservedDate',
    ];


    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::deleting(function ($order){

            $fabrics = $order->fabrics()->detach();

            if ( Storage::disk('img')->exists($order->image)){

                Storage::disk('img')->delete($order->image);

            }

            if ( Storage::disk('img')->exists($order->image2)){

                Storage::disk('img')->delete($order->image2);

            }

            if ( Storage::disk('img')->exists($order->image3)){

                Storage::disk('img')->delete($order->image3);

            }



        });

        static::addGlobalScope('order', function (Builder $builder) {
            $builder->orderBy('barcode', 'ASC')
                ->orderBy('group_id', 'ASC')
                ->orderBy('subgroup_id', 'ASC')
                ->orderBy('brand_id', 'ASC')
                ->orderBy('type_id', 'ASC')
                ->orderBy('season_id', 'ASC')
                ->orderBy('id', 'ASC')

                ->orderBy('year_id', 'ASC');

        });
    }

    public function user(){
        return $this->belongsTo(User::class);
    }

    public function brand(){
        return $this->belongsTo(brand::class);
    }

    public function fabric(){
        return $this->belongsTo(fabric::class);
    }

    public function fabrics(){
        return $this->belongsToMany(fabric::class,'orders_fabrics');
    }

    public function type(){
        return $this->belongsTo(type::class);
    }

    public function group(){
        return $this->belongsTo(group::class);
    }

    public function subgroup(){
        return $this->belongsTo(subgroup::class);
    }

    public function season(){
        return $this->belongsTo(season::class);
    }

    public function year(){
        return $this->belongsTo(Years::class);
    }

    public function supplier(){
        return $this->belongsTo(supplier::class);
    }

    public function fabricSource(){
        return $this->belongsTo(FabricSource::class);
    }


    // many - to - many
    public function colors(){
        return $this->belongsToMany(color::class,'orders_colors');
    }

    public function sizes(){
        return $this->belongsToMany(size::class,'orders_sizes')->orderBy('name');
    }


    public function scopeFilterData($query,$request){
        $columns = [
            'brand_id' => 'sel_brand',
           // 'fabric_id' => 'sel_fabric',
            'type_id' => 'sel_type',
            'group_id' => 'sel_group',
            'subgroup_id' => 'sel_subgroup',
            'season_id' => 'sel_season',
            'year_id' => 'sel_year',
            'supplier_id' => 'sel_supplier',
            'fabric_source_id' => 'sel_fabricSource',
            ];


        foreach ($columns as $column => $key){

            $col_request = $request[$column];

            if (!empty($col_request)){

                if ($col_request !== '0'){

                    $query->where($column,'=', $col_request);

                }

            }
        }


        if (isset($request['fabric_id'])) {
            $fab_id = $request['fabric_id'];
            if ($fab_id != 0 ){
                $query->whereHas('fabrics', function ($query) use ($fab_id) {
                    $query->where('fabric_id', $fab_id);
                });
            }

        }
//        if (isset($request['subgroup_id'])){
//
//            $subgroup_id = $request->get('subgroup_id');
//            if($subgroup_id != 0 ){
//                $subGroup = subgroup::findOrFail($subgroup_id);
//                if ($subGroup !== null){
//
//                    $query->where('subgroup_id','=', $subGroup->id);
//
//                }
//            }
//        }
//
//        if (isset($request['group_id'])){
//
//            $subgroup_id = $request->get('group_id');
//            if($subgroup_id != 0 ){
//                $subGroup = group::findOrFail($subgroup_id);
//                if ($subGroup !== null){
//                    $query->where('group_id','=', $subGroup->id);
//
//                }
//            }
//        }


        if (isset($request['done'])){

            $done = $request['done'];

            if ($done !== 'all'){
                $query->where('done','=', intval($done));
            }
        }


        return $query;
    }


}
